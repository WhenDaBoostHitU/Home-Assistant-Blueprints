blueprint:
  name: Air Quality with Type Selection (Custom Notifications, Room, Rate Limiting & Template Triggers)
  description: >
    This blueprint triggers actions based on air quality sensor readings.
    Select an air quality type (Good, Moderate, Bad, Severe, or Custom) and use preset thresholds unless Custom is chosen.
    Customize the clickAction, URL, and icon for each notification.
    Optionally enable rate limiting (using a timer helper set to 5 minutes) so that notifications will not be sent if one was sent in the past 5 minutes.
    Also, specify the Room/Area where the sensor is located; this value will be included in the notifications.
  domain: automation
  input:
    air_quality_type:
      name: Air Quality Type
      description: >
        Select the air quality type to monitor. If "Custom" is selected, the custom thresholds below will be used.
      default: Moderate
      selector:
        select:
          options:
            - Good
            - Moderate
            - Bad
            - Severe
            - Custom
    room:
      name: Room/Area
      description: "The room or area for which the air quality is being monitored."
      default: "Living Room"
      selector:
        text: {}
    enable_rate_limit:
      name: Enable Rate Limiting
      description: "If enabled, notifications will not be sent if one was sent within the past 5 minutes."
      default: false
      selector:
        boolean: {}
    rate_limit_timer:
      name: Rate Limit Timer
      description: "Timer helper to rate limit notifications (should be set to 5 minutes)."
      selector:
        entity:
          domain: timer
    pm25_sensor:
      name: PM2.5 Sensor
      description: "Sensor for particulate matter (PM2.5)."
      selector:
        entity:
          domain: sensor
    co2_sensor:
      name: Carbon Dioxide Sensor
      description: "Sensor for carbon dioxide."
      selector:
        entity:
          domain: sensor
    voc_sensor:
      name: VOC Sensor
      description: "Sensor for volatile organic compounds."
      selector:
        entity:
          domain: sensor
    light_entity:
      name: Light Entity
      description: "The light to turn on when air quality conditions are met."
      selector:
        entity:
          domain: light
    scene_entity:
      name: Air Quality Scene
      description: "The scene to activate for air quality notifications."
      selector:
        entity:
          domain: scene
    notify_service:
      name: Notification Service
      description: "The notification service to call (e.g. notify.mobile_app_device)."
      default: "notify.mobile_app_device"
      selector:
        text: {}
    custom_pm25_min:
      name: Custom PM2.5 Minimum
      description: "Used only if air quality type is Custom"
      default: 9
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: "µg/m³"
    custom_pm25_max:
      name: Custom PM2.5 Maximum
      description: "Used only if air quality type is Custom"
      default: 35.4
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: "µg/m³"
    custom_co2_min:
      name: Custom CO₂ Minimum
      description: "Used only if air quality type is Custom"
      default: 800
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "ppm"
    custom_co2_max:
      name: Custom CO₂ Maximum
      description: "Used only if air quality type is Custom"
      default: 1000
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "ppm"
    custom_voc_min:
      name: Custom VOC Minimum
      description: "Used only if air quality type is Custom"
      default: 101
      selector:
        number:
          min: 0
          max: 1000
    custom_voc_max:
      name: Custom VOC Maximum
      description: "Used only if air quality type is Custom"
      default: 150
      selector:
        number:
          min: 0
          max: 1000
    co2_click_action:
      name: CO₂ Notification Click Action
      description: "The click action for the CO₂ notification."
      default: "/lovelace/home"
      selector:
        text: {}
    co2_url:
      name: CO₂ Notification URL
      description: "The URL for the CO₂ notification."
      default: "/lovelace/home"
      selector:
        text: {}
    co2_icon_url:
      name: CO₂ Notification Icon URL
      description: "The icon URL for the CO₂ notification."
      default: "/local/icons/molecule-co2-yellow.png"
      selector:
        text: {}
    pm25_click_action:
      name: PM2.5 Notification Click Action
      description: "The click action for the PM2.5 notification."
      default: "/lovelace/home"
      selector:
        text: {}
    pm25_url:
      name: PM2.5 Notification URL
      description: "The URL for the PM2.5 notification."
      default: "/lovelace/home"
      selector:
        text: {}
    pm25_icon_url:
      name: PM2.5 Notification Icon URL
      description: "The icon URL for the PM2.5 notification."
      default: "/local/icons/chemical-weapon-yellow.png"
      selector:
        text: {}
    voc_click_action:
      name: VOC Notification Click Action
      description: "The click action for the VOC notification."
      default: "/lovelace/home"
      selector:
        text: {}
    voc_url:
      name: VOC Notification URL
      description: "The URL for the VOC notification."
      default: "/lovelace/home"
      selector:
        text: {}
    voc_icon_url:
      name: VOC Notification Icon URL
      description: "The icon URL for the VOC notification."
      default: "/local/icons/radiator-yellow.png"
      selector:
        text: {}

trigger:
  - platform: template
    value_template: >
      {% set val = states(pm25_sensor)|float %}
      {% if air_quality_type == "Good" %}
        {{ val >= 0 and val <= 9 }}
      {% elif air_quality_type == "Moderate" %}
        {{ val > 9 and val <= 35.4 }}
      {% elif air_quality_type == "Bad" %}
        {{ val > 35.4 and val <= 55.4 }}
      {% elif air_quality_type == "Severe" %}
        {{ val > 55.4 }}
      {% else %}
        {{ val >= custom_pm25_min and val <= custom_pm25_max }}
      {% endif %}
    id: PM2.5
  - platform: template
    value_template: >
      {% set val = states(co2_sensor)|float %}
      {% if air_quality_type == "Good" %}
        {{ val < 800 }}
      {% elif air_quality_type == "Moderate" %}
        {{ val >= 800 and val <= 1000 }}
      {% elif air_quality_type == "Bad" %}
        {{ val >= 1001 and val <= 1500 }}
      {% elif air_quality_type == "Severe" %}
        {{ val > 1500 }}
      {% else %}
        {{ val >= custom_co2_min and val <= custom_co2_max }}
      {% endif %}
    id: CO2
  - platform: template
    value_template: >
      {% set val = states(voc_sensor)|float %}
      {% if air_quality_type == "Good" %}
        {{ val >= 0 and val <= 100 }}
      {% elif air_quality_type == "Moderate" %}
        {{ val >= 101 and val <= 150 }}
      {% elif air_quality_type == "Bad" %}
        {{ val >= 151 and val <= 250 }}
      {% elif air_quality_type == "Severe" %}
        {{ val > 250 }}
      {% else %}
        {{ val >= custom_voc_min and val <= custom_voc_max }}
      {% endif %}
    id: VOC

mode: single

action:
  - service: light.turn_on
    target:
      entity_id: !input light_entity
  - service: scene.turn_on
    target:
      entity_id: !input scene_entity
  - choose:
      - conditions:
          - condition: trigger
            id: CO2
          - condition: template
            value_template: >
              {{ not enable_rate_limit or (states(rate_limit_timer) | string == 'idle') }}
        sequence:
          - service: !input notify_service
            data:
              title: "{{ air_quality_type }} CO₂ in {{ room }}"
              message: "CO₂ levels in the {{ room }} have reached {{ trigger.to_state.state }}."
              data:
                clickAction: !input co2_click_action
                url: !input co2_url
                icon_url: !input co2_icon_url
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ enable_rate_limit }}"
                sequence:
                  - service: timer.start
                    target:
                      entity_id: !input rate_limit_timer
      - conditions:
          - condition: trigger
            id: PM2.5
          - condition: template
            value_template: >
              {{ not enable_rate_limit or (states(rate_limit_timer) | string == 'idle') }}
        sequence:
          - service: !input notify_service
            data:
              title: "{{ air_quality_type }} PM2.5 in {{ room }}"
              message: "PM2.5 levels in the {{ room }} have reached {{ trigger.to_state.state }}."
              data:
                clickAction: !input pm25_click_action
                url: !input pm25_url
                icon_url: !input pm25_icon_url
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ enable_rate_limit }}"
                sequence:
                  - service: timer.start
                    target:
                      entity_id: !input rate_limit_timer
      - conditions:
          - condition: trigger
            id: VOC
          - condition: template
            value_template: >
              {{ not enable_rate_limit or (states(rate_limit_timer) | string == 'idle') }}
        sequence:
          - service: !input notify_service
            data:
              title: "{{ air_quality_type }} VOC in {{ room }}"
              message: "VOC levels in the {{ room }} have reached {{ trigger.to_state.state }}."
              data:
                clickAction: !input voc_click_action
                url: !input voc_url
                icon_url: !input voc_icon_url
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ enable_rate_limit }}"
                sequence:
                  - service: timer.start
                    target:
                      entity_id: !input rate_limit_timer
